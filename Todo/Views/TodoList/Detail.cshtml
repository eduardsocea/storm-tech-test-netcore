@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Models.TodoItems
@using Todo.Models.TodoLists
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
    var filter = ViewData[Constants.Filter] is TodoListDetailFilter parsedFilter ? parsedFilter : new TodoListDetailFilter();
    var orderBy = ViewData[Constants.OrderBy] is TodoListDetailOrder parsedOrderBy ? parsedOrderBy : new TodoListDetailOrder();

    var items = Model.Items.AsEnumerable();
    items = orderBy.Rank switch
    {
        OrderByType.Ascending => items.OrderBy(x => x.Rank),
        OrderByType.Descending => items.OrderByDescending(x => x.Rank),
        _ => items.OrderBy(x => x.Importance)
    };
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul class="list-group">

        <li class="list-group-item">
            @await Component.InvokeAsync("TodoItemCreateFields", new TodoItemCreateFields { TodoListTitle = Model.Title})

            <div class="form-group">
                <form asp-action="Detail" method="get">
                    @Html.HiddenFor(x => x.TodoListId)
                    <div class="form-group">
                        @Html.CheckBoxFor(_ => filter.HideDoneItems, new { @onchange = "this.form.submit()"})
                        @Html.LabelFor(_ => filter.HideDoneItems)

                    </div>
                    <div class="form-group">
                        @Html.LabelFor(_ => orderBy.Rank)
                        @Html.DropDownListFor(
                        _ => orderBy.Rank,
                        new[] { new SelectListItem("", "")}.Concat(Html.GetEnumSelectList<OrderByType>()),
                        new {@class="form-control", @onchange = "this.form.submit()"}
                        )
                    </div>
                </form>
            </div>
        </li>

        @foreach (var item in items)
        {
            @await Component.InvokeAsync("TodoItemSummary", item)
        }
    </ul>
</div>


@section Scripts
{
<script type="text/javascript">
    $("#createTodoListItem").click(function() {
        function addCreatedTodoListItem(todoListItemId){
            $.ajax({
                method: "get",
                url: `@Url.Action("GetTodoItemSummary", "TodoItem")`,
                data: {
                    todoItemId: todoListItemId
                },
                success: function(component) {
                    $(".list-group").append(component);
                }
            });
        }

        $.ajax({
            method: "post",
            url: "@Url.Action("Create", "TodoItemApi")",
            contentType: "application/json",
            dataType: 'json',
            data: JSON.stringify({
                todoListId: "@Model.TodoListId",
                title: $("#Title").val(),
                importance: $("#Importance").val(),
                responsiblePartyId: $("#ResponsiblePartyId").val()
            }),
            success: function(result) {
                addCreatedTodoListItem(result);
                $('#createListItemModal').modal('hide')
            },
            error: function(xhr, ajaxOptions, thrownError)
            {
                $("#createListItemModal .alert").empty();
                 $("#createListItemModal .alert").show();
                 for (const [key, value] of Object.entries(xhr.responseJSON.errors ?? [])) {
                      $("#createListItemModal .alert").append(
                          `<p>${value}</p>`
                      )
                 }
            }
        })
    });

    $('#createListItemModal').on('hidden.bs.modal', function () {
        $("#Title").val('');
        $("#Importance").val('Medium');
        $("#ResponsiblePartyId").val($("#ResponsiblePartyId>option").first().val());
        $("#createListItemModal .alert").hide();
    })
</script>
}