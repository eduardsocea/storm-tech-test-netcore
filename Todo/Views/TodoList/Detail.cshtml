@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Models.TodoLists
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
    var filter = ViewData[Constants.Filter] is TodoListDetailFilter parsedFilter ? parsedFilter : new TodoListDetailFilter();
    var orderBy = ViewData[Constants.OrderBy] is TodoListDetailOrder parsedOrderBy ? parsedOrderBy : new TodoListDetailOrder();

    var items = Model.Items.AsEnumerable();
    items = orderBy.Rank switch
    {
        OrderByType.Ascending => items.OrderBy(x => x.Rank),
        OrderByType.Descending => items.OrderByDescending(x => x.Rank),
        _ => items.OrderBy(x => x.Importance)
    };
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul class="list-group">

        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
            <div class="form-group">
                <form asp-action="Detail" method="get">
                    @Html.HiddenFor(x => x.TodoListId)
                    <div class="form-group">
                        @Html.CheckBoxFor(_ => filter.HideDoneItems, new { @onchange = "this.form.submit()"})
                        @Html.LabelFor(_ => filter.HideDoneItems)

                    </div>
                    <div class="form-group">
                        @Html.LabelFor(_ => orderBy.Rank)
                        @Html.DropDownListFor(
                            _ => orderBy.Rank,
                            new[] { new SelectListItem("", "")}.Concat(Html.GetEnumSelectList<OrderByType>()),
                            new {@class="form-control", @onchange = "this.form.submit()"}
                        )
                    </div>

                </form>
            </div>
        </li>

        @foreach (var item in items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass">

                <div class="row">

                    <div class="col-md-8">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>

                    <div class="col-md-4 text-right">
                        <small>
                            @item.ResponsibleParty.UserName

                            <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />

                        </small>
                    </div>
                </div>

            </li>
        }
    </ul>
</div>